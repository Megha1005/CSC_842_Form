{"version":3,"sources":["Components/RenderMaps.js","ver.js","Components/DataSurvey.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","default","RenderMaps","props","mapStyles","width","height","margin","state","latitude","longitude","address","apiStatus","this","encodedAddress","encodeURI","self","get","then","response","console","log","location","data","results","geometry","lat","lng","setState","catch","error","onSubmit","e","google","zoom","style","initialCenter","position","React","Component","GoogleApiWrapper","apiKey","ver","fields","values","firstName","lastName","zipcode","birthDate","education","feet","inches","phoneNumber","email","className","Form","FormGroup","Recaptcha","validEmailRegex","RegExp","DataSurvey","renderRedirect","preventDefault","validatePage","length","confirmEmail","alert","test","agreeConditions","redirect","inputState","id","placeholder","maxLength","pattern","required","onChange","target","value","selected","city","inputEducation","name","inputHeight","Input","type","min","bind","Recaptchaloaded","verifyCallback","isVerified","errorMessage","propsObj","to","pathname","Label","maxlength","sitekey","render","onloadCallback","onClick","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d5a203fc.chunk.js","sourcesContent":["import React from \"react\";\nimport {GoogleApiWrapper, Map, Marker} from \"google-maps-react\";\n\nconst axios = require('axios').default;\n\n\nclass RenderMaps extends React.Component {\n  // initializes state\n  constructor(props) {\n    \n    super(props)\n    this.state = {\n      latitude: \"\",\n      longitude: \"\",\n      address: \"\",\n      apiStatus: false\n    }\n  }\n  \n  mapStyles = {\n    width: '40%',\n    height: '50%',\n    margin: '5%'\n  };\n  \n  \n  componentDidMount() {\n    // console.log(\"zzz this props =>\", this.props);\n    const {address} = this.props;\n    // console.log(\"address => \", address);\n    const encodedAddress = encodeURI(address);\n\n    let self = this;\n    \n    axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}&key=AIzaSyCq0PCyticO-YMJtoZ89VlJPrmhgQuJKes`)\n      .then(function (response) {\n        // handle success\n        console.log(response);\n        const {data} = response;\n        const {results} = data;\n        const values = results[0];\n        const {geometry} = values;\n        const {location} = geometry;\n        const {lat, lng} = location;\n        self.setState({apiStatus: true})\n        self.setState({latitude: lat, longitude: lng});\n        console.log('location = ', location);\n        \n        \n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      })\n  }\n  \n  \n  render() {\n    const {latitude, longitude, apiStatus} = this.state;\n    console.log('apiStatus => ', apiStatus);\n    console.log('latitude => ', latitude);\n    return (\n      <div>\n        <form onSubmit={(e) => console.log('submit')}>\n          {/*  render the output map here*/}\n          {latitude > 0 && <Map\n            google={this.props.google}\n            zoom={12}\n            style={this.mapStyles}\n            initialCenter={{lat: latitude, lng: longitude}}\n          >\n            <Marker position={{lat: latitude, lng: longitude}}/>\n          </Map>}\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default GoogleApiWrapper(\n  (props) => ({\n      apiKey: \"AIzaSyCq0PCyticO-YMJtoZ89VlJPrmhgQuJKes\",\n    }\n  ))(RenderMaps)","import React from \"react\";\n\nimport \"./App.css\";\nimport {Form, FormGroup} from \"reactstrap\";\nimport {GoogleApiWrapper} from \"google-maps-react\";\nimport RenderMaps from \"./Components/RenderMaps\";\n\nclass ver extends React.Component {\n  state = {\n    fields: {},\n    apiStatus: false,\n    latitude: 0,\n    longitude: 0\n  };\n  \n  \n  render() {\n    // console.log('this.props => ', this.props);\n    const {values = {}} = this.props.location;\n    const {\n      firstName, lastName, state,address,zipcode, birthDate,\n      education, feet, inches, phoneNumber, email\n    } = values;\n    // const {apiStatus, latitude, longitude} = this.state;\n  \n    return (\n      <div className=\"ver\">\n        <div className=\"container\">\n          <div>\n            <div className=\"card\">\n      <span><div className=\"card-header font-weight:bold text-center \">\n      </div></span></div>\n            <Form className=\"login-form\">\n              <h1><span className=\"font-weight-bold\">Data Survey Verification Form</span></h1>\n              <FormGroup>\n                <h5> First Name :  {firstName}</h5>\n                <h5> Last Name :  {lastName} </h5>\n                <h5> State :  {state} </h5>\n                <h5> Address :  {address}</h5> \n                <h5> Zipcode :  {zipcode}</h5>\n                <h5> Education:  {education}</h5>\n                <h5> Birthdate :  {birthDate}</h5>\n                <h5> Height : Feet:  {feet} inches:  {inches}</h5>\n                <h5> Phone Number:  {phoneNumber}</h5>\n                <h5> Email :  {email}</h5>\n              </FormGroup>\n            </Form>\n            <div>\n  \n  \n              <RenderMaps address={address}/>\n            </div>\n          </div>\n        </div>\n              <h1><span className=\"font-weight-bold\">Thank you for taking this survey !! </span></h1>\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({apiKey:'AIzaSyCq0PCyticO-YMJtoZ89VlJPrmhgQuJKes'})(ver);","import React, {Component} from 'react';\nimport '../App.css';\nimport {Form, FormGroup, Input, Label} from \"reactstrap\";\nimport {Redirect} from \"react-router\";\n\nvar Recaptcha = require('react-recaptcha');\nconst validEmailRegex = \n  RegExp(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i);\n\nexport default class DataSurvey extends Component {\n  constructor(props) {\n    \n    super(props)\n    this.renderRedirect = this.renderRedirect.bind(this);\n     this.Recaptchaloaded =this.Recaptchaloaded.bind(this);\n     this.verifyCallback = this.verifyCallback.bind(this);\n    \n\n    \n    this.state = {\n      validatePage: false,\n      isVerified: false,\n      value: '',\n      redirect: false,\n      firstName: '',\n      lastName: '',\n      state: '',\n      address: '',\n      zipcode:'',\n      birthDate: null,\n      education: '',\n      feet: 0,\n      inches: 0,\n      phoneNumber: null,\n      email: '',\n      confirmEmail: null,\n      errorMessage: null,\n      agreeConditions: false\n    }    \n\n  }\n\n  \n  Recaptchaloaded() {\n    console.log('Recaptcha successfully loaded');\n  }\n  \n  verifyCallback(response) {\n    if (response) {\n      this.setState({\n        isVerified: true,\n      })\n    }\n  }\n\n \n  \n  renderRedirect = (e) => {\n    e.preventDefault();\n    this.setState({validatePage: true});\n\n    if(this.state.firstName.length === 0 || this.state.lastName.length === 0 ||  this.state.state.length === 0 ||\n       this.state.address.length === 0 || this.state.zipcode.length === 0 ||  this.state.birthDate === null || \n       this.state.phoneNumber.length === 0 || this.state.email.length === 0 || this.state.confirmEmail.length === 0) {\n        alert(\"Required fields marked with * cannot be empty!\");\n        this.setState({validatePage: false});\n       }\n\n    if(this.state.email !== this.state.confirmEmail){\n      alert(\"Email ids dont match. Please re-enter!\");\n      this.setState({validatePage: false});\n    } \n    \n    if (this.state.phoneNumber.length !== 7) {\n        alert(\"Phone number length should be 7 digits!\");\n        this.setState({validatePage: false});\n    }\n\n    if(this.state.address.length > 40) {\n      alert(\"Address length should be less than 40 characters!\");\n      this.setState({validatePage: false});\n    }\n\n    if(this.state.zipcode.length !== 5) {\n      alert(\"Zipcode should contain exactly 5 digits!\");\n      this.setState({validatePage: false});\n    }\n\n    if(!validEmailRegex.test(this.state.email)){\n      alert(\"Invalid Email address !\");\n      this.setState({validatePage: false});\n    }\n\n    if(!this.state.agreeConditions) {\n      alert(\"Please agree to the terms and conditions!\");\n      this.setState({validatePage: false});\n    }\n\n    if (this.state.validatePage)\n    {\n      this.setState({\n      redirect: true\n    })}\n        \n  }\n  \n  inputState = () => {\n    return (\n      <div className=\"mb-3\">\n        <label>State <span style={{\"color\": \"red\"}}>*</span></label>\n        <select id=\"State\" className=\"form-control\" placeholder=\"Enter your City\"\n                maxLength=\"40\" pattern=\"[A-Za-z\\s]+\" required\n                onChange={(e) => this.setState({state: e.target.value})}>\n          <option selected>Select one</option>\n          <option value=\"AS\">American Samoa</option>\n          <option value=\"GU\">Guam</option>\n          <option value=\"MP\">Northern Mariana Islands</option>\n          <option value=\"PR\">Puerto Rico</option>\n          <option value=\"UM\">United States Minor Outlying Islands</option>\n          <option value=\"VI\">Virgin Islands</option>\n          <option value=\"AL\">Alabama</option>\n          <option value=\"AK\">Alaska</option>\n          <option value=\"AZ\">Arizona</option>\n          <option value=\"AR\">Arkansas</option>\n          <option value=\"CA\">California</option>\n          <option value=\"CO\">Colorado</option>\n          <option value=\"CT\">Connecticut</option>\n          <option value=\"DE\">Delaware</option>\n          <option value=\"DC\">District Of Columbia</option>\n          <option value=\"FL\">Florida</option>\n          <option value=\"GA\">Georgia</option>\n          <option value=\"HI\">Hawaii</option>\n          <option value=\"ID\">Idaho</option>\n          <option value=\"IL\">Illinois</option>\n          <option value=\"IN\">Indiana</option>\n          <option value=\"IA\">Iowa</option>\n          <option value=\"KS\">Kansas</option>\n          <option value=\"KY\">Kentucky</option>\n          <option value=\"LA\">Louisiana</option>\n          <option value=\"ME\">Maine</option>\n          <option value=\"MD\">Maryland</option>\n          <option value=\"MA\">Massachusetts</option>\n          <option value=\"MI\">Michigan</option>\n          <option value=\"MN\">Minnesota</option>\n          <option value=\"MS\">Mississippi</option>\n          <option value=\"MO\">Missouri</option>\n          <option value=\"MT\">Montana</option>\n          <option value=\"NE\">Nebraska</option>\n          <option value=\"NV\">Nevada</option>\n          <option value=\"NH\">New Hampshire</option>\n          <option value=\"NJ\">New Jersey</option>\n          <option value=\"NM\">New Mexico</option>\n          <option value=\"NY\">New York</option>    \n          <option value=\"OH\">Ohio</option>\n          <option value=\"OK\">Oklahoma</option>\n          <option value=\"OR\">Oregon</option>\n          <option value=\"PA\">Pennsylvania</option>\n          <option value=\"RI\">Rhode Island</option>\n          <option value=\"SC\">South Carolina</option>\n          <option value=\"SD\">South Dakota</option>\n          <option value=\"TN\">Tennessee</option>\n          <option value=\"TX\">Texas</option>\n          <option value=\"UT\">Utah</option>\n          <option value=\"VT\">Vermont</option>\n          <option value=\"VA\">Virginia</option>\n          <option value=\"WA\">Washington</option>\n          <option value=\"WV\">West Virginia</option>\n          <option value=\"WI\">Wisconsin</option>\n          <option value=\"WY\">Wyoming</option>\n          value = {this.state.city}\n          onChange = {(e) => this.setState({city: e.target.value})}\n        </select>\n      </div>\n    )\n  }\n  \n  inputEducation = () => {\n    return (\n      <div className=\"mb-3\">\n        <label>Education Level (Optional)</label>\n        <select id=\"inputEducation\" name=\"Education\"\n                className=\"form-control\"\n                onChange={(e) => this.setState({education: e.target.value})}\n                placeholder=\"Enter your highest education\">\n          <option>Enter your highest Education</option>\n          <option> Other</option>\n          <option>High School</option>\n          <option>College</option>\n          <option>Graduate Study</option>\n          <option>PHD</option>\n          \n          value = {this.state.education}\n          onChange = {(e) => this.setState({education: e.target.value})}\n        </select>\n      </div>\n    \n    )\n    \n  }\n  inputHeight = () => {\n    return (\n      <group className=\"height\">\n        <div className=\"mb-3\">\n          <label><h5> Enter your Height in feet and inches (Optional)</h5></label>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <label>Feet</label>\n              <Input type=\"number\" min=\"1\"\n                     value={this.state.feet}\n                     onChange={(e) => this.setState({feet: e.target.value})}\n                     placeholder=\"feet\"/></div>\n            <div className=\"col-md-6\">\n              <label>Inches</label>\n              <Input type=\"number\" min=\"0\"\n                     value={this.state.inches}\n                     onChange={(e) => this.setState({inches: e.target.value})}\n                     placeholder=\"Inches\"/>\n            </div>\n          </div>\n        </div>\n      </group>\n    )\n  }\n  \n  \n  render() {\n    if (this.state.redirect) {\n      const propsObj = this.state;\n      return <Redirect to={{pathname: '/ver', values: propsObj}}/>\n    }\n    return (\n      <div className=\"container\">\n        <div>\n          <div className=\"card\">\n      <span><div className=\"card-header font-weight:bold text-center \">\n      <h2>CSC 642 Summer 2020 Individual Assignment Megha Babariya</h2>\n      </div></span></div>\n          <Form className=\"login-form\">\n            <h1><span className=\"font-weight-bold\">Data Survey Form</span></h1>\n            <h6 className=\"text-center\"> ( Mandatory Fields are marked with\n              <span style={{\"color\": \"red\"}}>  *  </span> )</h6>\n            <FormGroup>\n              <div className=\"mb-3\">\n                <Label> First Name <span style={{\"color\": \"red\"}}>*</span></Label>\n                <Input type=\"firstname\" required value={this.state.firstName}    \n                       onChange={(e) => this.setState({firstName: e.target.value})}\n                       placeholder=\"Enter your First Name\" maxlength=\"40\"/>\n              </div>\n  \n              <div className=\"mb-3\">\n                <Label> Last Name <span style={{\"color\": \"red\"}}>*</span> </Label>\n                <Input type=\"lastName\" required value={this.state.lastName}\n                       onChange={(e) => this.setState({lastName: e.target.value})}\n                       placeholder=\"Enter your Last Name\" maxlength=\"40\"/>\n              </div>\n  \n              {this.inputState()}\n  \n              <div className=\"mb-3\">\n                <label>Address <span style={{\"color\": \"red\"}}>*</span></label>\n                <Input type=\"address\" required\n                       value={this.state.address}\n                       onChange={(e) => this.setState({address: e.target.value})}\n                       placeholder=\"Enter your Address\"/>\n              </div>\n\n              <div className=\"mb-3\">\n                <label>Zipcode <span style={{\"color\": \"red\"}}>*</span></label>\n                <Input type=\"number\" required\n                       value={this.state.zipcode}\n                       onChange={(e) => this.setState({zipcode: e.target.value})}\n                       placeholder=\"Enter your Zipcode\"/>\n              </div>\n  \n              <div className=\"mb-3\">\n                <label> Birth Date <span style={{\"color\": \"red\"}}>*</span></label>\n                <Input type=\"date\" required\n                       value={this.state.birthDate}\n                       onChange={(e) => this.setState({birthDate: e.target.value})}\n                       placeholder=\"mm/dd/yyyy\"/>\n              </div>\n  \n              {this.inputEducation()}\n  \n              {this.inputHeight()}\n  \n              <div className=\"mb-3\">\n                <label> Phone Number <span style={{\"color\": \"red\"}}>*</span></label>\n                <Input type=\"inputPhone\" required \n                       value={this.state.phoneNumber} pattern = \"^\\d{7}$\"\n                       onChange={(e) => this.setState({phoneNumber: e.target.value})}\n                       placeholder=\"Enter your Phone Number\"/>\n              </div>\n  \n              <div className=\"mb-3\">\n                <label> Email <span style={{\"color\": \"red\"}}>*</span></label>\n                <Input type=\"email\" required\n                       value={this.state.email}\n                       onChange={(e) => this.setState({email: e.target.value})}\n                       placeholder=\"Enter your Email Id\"/>\n              </div>\n  \n              <div className=\"mb-3\">\n                <label> Confirm Email <span style={{\"color\": \"red\"}}>*</span></label>\n                <Input type=\"email\" required className=\"form-control\"\n                       value={this.state.confirmEmail}\n                       onChange={(e) => this.setState({confirmEmail: e.target.value})}\n                       placeholder=\"Confirm your Email Id\"/>\n              </div>\n  \n              <FormGroup className=\"checkbox-main\">\n                <input type=\"checkbox\"  required className=\"larger\"\n                value={this.state.agreeConditions}\n                onChange={(e) => this.setState({agreeConditions: e.target.value})}\n                />\n                <label className=\"checkentry\"> I Agree to the terms and conditions </label>\n              </FormGroup>\n  \n              <FormGroup>\n  \n              </FormGroup>\n              <div className=\"re-cap\">\n                <Recaptcha\n                  sitekey=\"6Le297EZAAAAAETHt6G_7aboB2K4fBZVuX5Ko9VE\"\n                  render=\"explicit\"\n                  onloadCallback={this.Recaptchaloaded}\n                  verifyCallback={this.verifyCallback}\n                />\n              </div>\n              <button className=\"btn-primary btn-lg btn-dark btn-block\"\n                      onClick={this.renderRedirect}>\n                Submit\n              </button>\n            </FormGroup>\n          </Form>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, {Component} from 'react';\nimport './App.css';\n// import {BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport ver from './ver';\nimport DataSurvey from './Components/DataSurvey';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"root\">\n          <Switch>\n            <Route exact path=\"/\" component={DataSurvey}/>\n            <Route path=\"/ver\" component={ver}/>\n\n            {/* <Route path={\"/ver\"} \n            render={(props) => <YourComp {...props} keyProp={someValue} key={randomGen()}/>} /> */}\n          </Switch>\n        </div>\n        </Router>\n    );\n\n  }\n}\n\nexport default (App) ;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n// import { Provider } from 'react-redux';\n// import { createStore } from 'redux';\n// import rootReducer from './redux/reducers/rootReducer';\n// const store = createStore(rootReducer);\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}